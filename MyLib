function OmniPrint(Input,NumExpand)
	local Expanded = 1
	local function funcOmniPrint(Input,NumExpand)
		local ExpandLim = NumExpand or math.huge
		if type(Input) == "table" and Expanded <= ExpandLim then
			for k,v in pairs(Input) do
				if type(v) == "table" and Expanded < ExpandLim then
					print(tostring(k))
					if #v ~= 0 then
						Expanded = Expanded + 1
						funcOmniPrint(v,ExpandLim)
					else
						print("empty table")
					end
				else
					local kout = tostring(k)
					local vout = tostring(v)
					print(kout..",",vout)
				end
			end
		else
			print(tostring(Input))
		end
	end

	funcOmniPrint(Input,NumExpand)
end

function tSearch(table,keyword,matchmethod)
	local function sSearch(str,keyword,matchmethod)
		local CompValue = str:upper()
		local CompKey = keyword:upper()
		local bSuccess = false
		
		local tMethod = {
		exact = "^" .. CompKey .. "$",
		forward = "^" .. CompKey,
		backward = CompKey.."$",
		}

		local pattern = tMethod[matchmethod] or CompKey --default is partial match
		if CompValue:find(pattern) then bSuccess = true end
		
		return bSuccess
	end

	for k,v in pairs(table) do
		if type(v) == "string" and sSearch(v,keyword,matchmethod) then
			return k,v
		end
	end

	return false
end

local tProto = {
	insert = function(self,...)
		table.insert(self,...)
	end,
	
	remove = function(self,...)
		return table.remove(self,...)
	end,

	search = function(self,keyword,matchmethod) return tSearch(self,keyword,matchmethod) end,

	inherit = function(self,tInit) --make table which has the same metatable with self except __index = self.
		if type(tInit) == "table" or (not tInit) then
			local function TblCopy(table) --won't copy tables in value, they will remain as simple refference
				local new = {}
				if type(table) == "table" then
					for k,v in pairs(table) do
						new[k] = v
					end
					return new
				else
					return false
				end
			end

			local metatbl =TblCopy(getmetatable(self)) or {}
			metatbl.__index = self

			local t = tInit or {}
			return setmetatable(t,metatbl)
		else
			print("Bad Initializer")
		end
	end,

	--[[new = function(self,tInit) --make table which has the same metatable with self 
		return TblWithMetaTbl(getmetatable(self),tInit)
	end,]]
}

function NewTable(tInit)
	return tProto:inherit(tInit)
end

local DebugLevel = 0
function DebugMsg(str,level,isSpecial)
	level = level or 1
	if isSpecial then
		local tCom = {
			SET = function(ChangeTo)
				DebugLevel = ChangeTo
			end,

			SHOW = function()
				if DebugLevel >= 1 then
					print("Debug Mode at Level "..DebugLevel)
				end
			end,
		}
		local Com = str:upper()
		if tCom[Com] then tCom[Com](level) end
	elseif level <= DebugLevel then --Print debug message
		print(str)
	end
end

function Split(str, delim)
	local LastPos = 1
	local Pattern = "(.-)" .. delim
	local tResult = NewTable()
	local s,e,cap = str:find(Pattern,LastPos)

	while s do
		if cap ~= "" then
			tResult:insert(cap)
		end
		LastPos = e + 1
		s,e,cap = str:find(Pattern,LastPos)
	end

	if LastPos <= str:len() then
		cap = str:sub(LastPos)
		tResult:insert(cap)
	end

	return tResult
end